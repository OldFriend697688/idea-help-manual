<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE terms SYSTEM "https://resources.jetbrains.com/writerside/1.0/glossary.dtd">
<terms>
   <!-- 操作系统 （Operating System，OS）-->
   <term name="cmd">CMD，全称 Command Prompt，中文译为"命令提示符"。它是一个基于 Windows 操作系统的命令行界面，用户可以通过输入特定的命令与操作系统进行交互。</term>
   <term name="desktop-shortcut">桌面快捷方式，简单来说，就是指向电脑中某个程序、文件或文件夹的一个"标记"。通过双击这个标记，就能快速打开相应的程序或文件，就像走捷径一样。</term>
   <term name="gui">GUI（Graphical User Interface），中文译为图形用户界面，是指采用图形方式显示的计算机操作界面。与早期的命令行界面（CLI）相比，GUI 使用户可以通过直观的图形元素（例如：图标、按钮、窗口等）与计算机进行交互，大大降低了计算机使用的门槛。</term>
   <term name="ios">iOS 系统是由苹果公司为其移动设备（例如：iPhone、iPad、iPod touch）开发的一款专有移动操作系统。它以其流畅的用户体验、高度的安全性、丰富的应用程序等特点而著称。</term>
   <term name="launchpad">Launchpad 是 macOS 系统中一个非常直观的应用启动器，它将所有安装的应用程序以网格形式呈现，就像 iOS 设备的主屏幕一样。通过 Launchpad，您可以快速找到并打开所需的应用，让您的工作更加高效。</term>
   <term name="linux">严格来说，"Linux" 通常指的是 Linux 内核，而不是一个完整的操作系统。我们日常生活中所说的"Linux 系统"，通常指的是基于 Linux 内核，并包含其他 GNU 工具和应用程序的发行版，例如：Ubuntu、CentOS、Debian、Red Hat 等。</term>
   <term name="macos">macOS 是苹果公司为其 Macintosh（Mac）系列电脑开发的图形用户界面操作系统。它以其优美的设计、流畅的操作体验和强大的生态系统而闻名。macOS 基于 Unix 内核，兼具了 Unix 系统的稳定性和现代操作系统的易用性。</term>
   <term name="os">操作系统（OS）是管理和控制计算机硬件与软件资源的系统软件。它就像是计算机的管家，负责分配硬件资源、管理文件系统、提供用户界面，以及协调各种软件的运行。</term>
   <term name="spotlight">Spotlight 是一款 macOS 系统内置的强大搜索工具，让您可以快速找到几乎任何东西，包括：应用程序、文件和文件夹等。</term>
   <term name="tvOS">tvOS 是苹果公司为 Apple TV 设计的操作系统，它基于 iOS 系统，并针对大屏幕电视进行了优化。tvOS 提供了一个流畅、直观的用户界面，让用户可以轻松地在电视上享受各种娱乐内容。</term>
   <term name="watchOS">watchOS 是苹果公司为其智能手表 Apple 、Watch 量身定制的操作系统，它与 iOS 系统有着深厚的渊源，共享了许多核心技术。watchOS 的设计初衷是让用户能够在手腕上便捷地获取信息、进行健康管理和控制其他 Apple 设备。</term>
   <term name="windows">Windows 是由微软公司开发的一系列操作系统，以图形用户界面（GUI）为特色。它为用户提供了一个直观、易于操作的计算机使用环境。Windows 系统在个人电脑、笔记本电脑、平板电脑等设备上广泛应用，是全球市场份额最大的操作系统。</term>
   <term name="windows 10">Windows 10 是微软推出的全新操作系统，它将电脑、平板电脑和手机等设备的体验进行了统一。</term>

   <!-- 集成开发环境（Integrated Development Environment，IDE）-->
   <term name="eclipse">Eclipse 是一款开源、跨平台的集成开发环境（IDE），最初由 IBM 开发，主要用于 Java 语言的开发，但通过插件扩展，也可以支持 C/C++、Python、PHP 等其他编程语言。Eclipse 以其强大的功能、灵活的扩展性和庞大的插件生态系统而闻名，是 Java 开发领域中使用最广泛的 IDE 之一。</term>
   <term name="fleet">JetBrains Fleet 是 JetBrains 推出的一款新一代集成开发环境 (IDE) 和轻量级代码编辑器。它的目标是结合传统 IDE 的强大功能和轻量级编辑器的速度与简洁性，为开发者提供更高效、更灵活的开发体验。可以将其视为 JetBrains 对标 VS Code 等轻量级编辑器的产品，但它并非完全取代 JetBrains 旗下原有的 IDE 产品线，而是提供了一个新的选择，尤其适用于快速编辑、远程开发和协作等场景。</term>
   <term name="ide">IDE (Integrated Development Environment)，中文译为集成开发环境，是一种旨在提高程序员开发效率的应用程序。它将编写、编译、调试、构建和部署软件所需的各种工具集成到一个单一的用户界面中。可以将其比作一个包含所有必要工具的工具箱，使开发人员无需在不同的应用程序之间切换，从而专注于代码编写和问题解决。</term>
   <term name="jetbrains">JetBrains 是一家全球知名的软件开发公司，专门为开发者打造高效、智能的工具。他们提供的工具覆盖了软件开发的整个生命周期，从代码编写、测试到部署，几乎涵盖了所有主流的编程语言和技术。</term>
   <term name="sts">Spring Tool Suite（STS）是一个基于 Eclipse 的集成开发环境（IDE），专门为 Spring 应用程序的开发而设计。它是 Spring 官方提供的工具，旨在简化 Spring 应用的创建、开发、调试和部署过程。简单来说，STS 就是一个定制版的 Eclipse，其中预装了 Spring 开发所需的各种插件和工具，开箱即用，大大提高了 Spring 开发的效率。</term>
   <term name="vscode">VS Code（全称 Visual Studio Code）是由微软开发的一款免费、开源且跨平台的代码编辑器。它功能强大、轻量级且高度可定制，因此受到了广大开发者的喜爱。虽然名为 Visual Studio Code，但它与功能更全面的 Visual Studio IDE 不同，VS Code 更专注于代码编辑，但通过丰富的扩展插件，可以将其功能扩展到接近 IDE 的程度。</term>

   <!-- 编程语言（Programming Language） -->
   <term name="android">Android 是一种基于 Linux 内核的开源移动操作系统，主要用于触摸屏移动设备，如智能手机和平板电脑。它由 Google 成立的开放手机联盟（Open Handset Alliance）持续领导与开发。Android 以其开放性、灵活性和丰富的应用生态而闻名，是目前全球使用最广泛的移动操作系统。中文通常非正式地音译为"安卓"。</term>
   <term name="c">C 语言是一种用途广泛的计算机编程语言，以其高效、灵活和可移植性而闻名。它由丹尼斯·里奇（Dennis Ritchie）于 1972 年在贝尔实验室开发，最初是为开发 Unix 操作系统而设计的。自那时以来，C 语言已经成为最流行的编程语言之一，并对许多其他编程语言（例如： C++、Java、C# 等）产生了深远的影响。</term>
   <term name="c++">C++ 是一种通用的、面向对象的编程语言，它是 C 语言的扩展。Bjarne Stroustrup 在 20 世纪 80 年代早期在贝尔实验室开发了 C++，最初被称为"C with Classes"（带类的 C）。C++ 保留了 C 语言的高效性和底层控制能力，同时增加了面向对象编程的特性，例如：类、继承、多态等。这使得 C++ 既可以用于系统级编程，也可以用于应用程序开发。</term>
   <term name="dart">Dart 是一种由 Google 开发的客户端优化的编程语言，用于在任何平台上构建快速的应用程序。它最初是为了在 Web 浏览器中替代 JavaScript 而设计的，但现在已经发展成一种通用的编程语言，可以用于开发 Web、移动、桌面和服务器应用程序。</term>
   <term name="go">Go（也称为 Golang）是由 Google 开发的一种开源的、静态类型的、编译型的编程语言。它于 2009 年首次发布，并在 2012 年发布了 1.0 版本。Go 语言旨在提供一种简洁、高效、可靠的编程语言，特别适用于网络编程、云计算和大规模分布式系统。</term>
   <term name="groovy">Groovy 是一种基于 Java 虚拟机 (JVM) 的敏捷动态语言，它结合了 Python、Ruby 和 Smalltalk 等语言的许多强大特性。这意味着 Groovy 程序可以无缝地与 Java 代码互操作，并使用丰富的 Java 库。Groovy 的设计目标是提高开发效率，简化 Java 开发的复杂性。</term>
   <term name="html">HTML（HyperText Markup Language，超文本标记语言）是构建网页的基础。它使用标签来描述网页的结构和内容，告诉浏览器如何在页面上显示文本、图像、链接和其他元素。您可以把 HTML 比作一栋建筑的骨架，它定义了建筑的布局和框架，而 CSS（层叠样式表）则负责建筑的外观装饰，JavaScript 则赋予建筑交互功能。</term>
   <term name="java">Java 是一种广泛使用的、面向对象的、跨平台的编程语言。它由 Sun Microsystems 公司（后被 Oracle 公司收购）于 1995 年推出，并迅速流行起来，成为企业级应用、移动应用（尤其是 Android）以及其他各种软件开发的首选语言之一。</term>
   <term name="javascript">JavaScript（通常缩写为 JS）是一种轻量级、解释型或即时编译型的编程语言，主要用于为网页添加交互功能，使网页不再是静态的展示，而是能够响应用户的操作，提供动态、丰富的用户体验。虽然它最初是作为客户端脚本语言而闻名，但现在也被广泛用于服务器端开发（Node.js）、移动应用开发（React Native、Ionic）、桌面应用开发（Electron）以及游戏开发等领域。</term>
   <term name="kotlin">Kotlin 是一种现代化的静态类型编程语言，它运行在 Java 虚拟机 (JVM) 上，也可以编译成 JavaScript 源代码或本地代码（例如：使用 Kotlin/Native）。它由 JetBrains 公司（开发了 IntelliJ IDEA 集成开发环境的公司）开发，并于 2017 年被 Google 官方宣布为 Android 开发的首选语言。</term>
   <term name="python">Python 是一种高级的、通用的、解释型的编程语言，以其简洁易读的语法和强大的功能而闻名。它由 Guido van Rossum 于 1989 年底发明，并于 1991 年首次发布。Python 的设计哲学强调代码的可读性和简洁性，力求使用更少的代码来表达更多的想法。</term>
   <term name="scala">Scala 是一种现代多范式编程语言，它融合了面向对象编程（OOP）和函数式编程（FP）的特性，旨在以简洁、优雅和类型安全的方式表达常见的编程模式。它运行在 Java 虚拟机（JVM）上，并可以与现有的 Java 代码和库无缝互操作。</term>
   <term name="stylesheets (css, less, sass)">样式表是用来定义网页元素如何呈现的语言。CSS（层叠样式表）是最基本的样式表语言，用于描述 HTML 或 XML（例如：SVG、XHTML）文档的呈现。Less 和 Sass 是 CSS 的扩展，它们提供了变量、嵌套、混合等功能，使得样式表的编写更加高效和可维护。</term>
   <term name="typescript">TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，这意味着所有有效的 JavaScript 代码也是有效的 TypeScript 代码。TypeScript 的主要目标是为 JavaScript 添加静态类型，从而提高代码的可维护性和可扩展性，尤其是在大型项目中。</term>
   <term name="xpath">XPath（XML Path Language，XML 路径语言）是一种在 XML 文档中查找信息的语言。它可以用来选取 XML 文档中的节点或者节点集。由于 HTML 可以看作是 XML 的一种特殊形式，所以 XPath 也常用于 HTML 的解析和信息提取，尤其在网络爬虫和自动化测试领域应用广泛。</term>
   <term name="xsl">XSL (Extensible Stylesheet Language)，中文译为可扩展样式表语言，是一种用于转换 XML 文档的语言。它定义了如何将 XML 数据转换为其他格式，例如：HTML、文本、甚至是其他的 XML 格式。您可以将 XSL 理解为 XML 的"样式表"，类似于 CSS 之于 HTML 的作用。</term>
   <term name="xslt">XSLT（Extensible Stylesheet Language Transformations），中文译为可扩展样式表转换语言，是一种用于转换 XML 文档的语言。它可以将 XML 数据转换成其他格式，例如：HTML、文本或其他 XML 格式。XSLT 是 XSL（Extensible Stylesheet Language，可扩展样式表语言）的一部分，后者是一个用于描述如何显示 XML 数据的语言家族，其中 XSLT 是最重要的组成部分。</term>

   <!-- 数据库（SQL/NoSQL） -->
   <term name="database">数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。通过使用数据库管理系统（DBMS, Database Management System），用户和应用程序可以方便地创建、查询、更新和管理数据。</term>
   <term name="mongodb">MongoDB 是一个面向文档的 NoSQL 数据库，它使用类似 JSON 的文档来存储数据。它由 MongoDB Inc. 开发并维护，以其高性能、高可用性和易扩展性而闻名，被广泛应用于各种规模的应用程序中。</term>
   <term name="mysql">MySQL 是一个流行的开源关系型数据库管理系统（RDBMS）。它使用结构化查询语言（SQL）进行数据管理，被广泛应用于 Web 应用程序的后台数据存储。</term>
   <term name="oracle">Oracle 数据库是由 Oracle 公司（甲骨文公司）开发的关系型数据库管理系统（RDBMS），是目前世界上使用最广泛的数据库系统之一。它以其强大的功能、高性能、高可靠性和良好的可移植性而闻名，被广泛应用于各种规模的企业和组织，特别是大型企业级应用、数据仓库、云计算等领域。</term>
   <term name="redis">Redis（Remote Dictionary Server，远程字典服务器）是一个开源的内存数据结构存储系统，常用作数据库、缓存和消息代理。它以其高性能、灵活性和丰富的数据结构而闻名，是 NoSQL 数据库中的重要一员。</term>
   <term name="sql">SQL（Structured Query Language，结构化查询语言）是一种用于管理和操作关系型数据库的标准语言。它不是像 Java 或 Python 那样的通用编程语言，而是专门设计用来处理数据库中的数据。您可以使用 SQL 来执行各种操作，包括创建和修改数据库结构、插入、更新、删除和检索数据等。</term>

   <!-- 专业术语 -->
   <term name="absolute-path">在计算机文件系统中，绝对路径是从文件系统根目录开始的、表述一个文件或目录完整路径的字符串。它精确地定位了文件或目录在文件系统中的确切位置，不受当前工作目录的影响。例如：C:\Users\OldFriend\A.txt。</term>
   <term name="api">API (Application Programming Interface)，中文译为"应用程序编程接口"，是一组定义了软件组件之间如何交互的规则和协议。简单来说，API 允许不同的软件程序相互"对话"和共享信息，而无需开发者了解彼此的内部实现细节。</term>
   <term name="applications">Applications 文件夹是 macOS 系统中所有应用程序的默认存放位置。</term>
   <term name="bytecode">字节码（Bytecode）是一种介于人类可读的高级语言（例如：Java、Python）和计算机可以直接执行的机器码之间的中间形式的代码。它不是真正的机器码，因此不能直接在硬件上运行，而是需要通过解释器或虚拟机（VM）来执行。</term>
   <term name="camel-case">驼峰命名法（Camel Case）是一种编程中常用的命名规则，特点是多个单词组合时，除了第一个单词外，其他单词的首字母大写。这种命名法不使用空格，而是通过大小写的变化来区分单词。根据首字母的大小写，驼峰命名法又分为两种：小驼峰式（Lower Camel Case），首字母小写；和大驼峰式（Upper Camel Case），首字母大写。驼峰命名法在 JavaScript、Java 等多种编程语言中被广泛采用。</term>
   <term name="class-name">在编程领域，类名（Class Name）是用于标识面向对象编程（OOP）中类的名称。类是创建对象的蓝图或模板，它们封装了数据（属性）和操作这些数据的方法。定义清晰、直观且符合命名规范的类名对于代码的可读性、可维护性和协作开发非常重要。</term>
   <term name="code-completion">代码补全是一种智能化的编程辅助功能，它能根据上下文和已有的代码，自动补全您正在编写的代码。这大大提高了编程效率，减少了打字错误，让开发者可以更专注于解决问题。</term>
   <term name="code-formatting">代码格式化是指按照特定的规则对代码进行排版，使其结构清晰、层次分明，从而提高代码的可读性、可维护性。</term>
   <term name="code-highlighting">代码高亮（Code Highlighting）是一种在代码编辑器或显示环境中对源代码进行语法着色的技术，旨在提高代码的可读性和易于理解。通过将代码中的关键字、变量、字符串、注释等元素以不同的颜色或样式呈现，代码高亮使得开发者能够迅速识别代码的结构和各个部分的功能。这种视觉上的区分有助于减少阅读错误，加快调试过程，并且使得代码审查更加高效。现代的集成开发环境（IDEs）和代码编辑器通常都内置了代码高亮功能，支持多种编程语言。</term>
   <term name="code-static-analysis">代码静态分析是一种不运行代码而检查代码质量和错误的技术。它通过分析代码的结构、语法和潜在的问题，来发现可能的缺陷、安全漏洞或不符合最佳实践的编码风格。静态分析工具如 SonarQube、FindBugs、PyLint 等，可以在不实际执行代码的情况下，提供关于代码质量的反馈，帮助开发者提前发现和修复问题，提高代码的可靠性和维护性。</term>
   <term name="comments">在编程领域，注释（Comments） 是程序源代码中用于解释代码功能的文本。它们不会被编译器或解释器执行，而是为程序员提供理解代码逻辑、功能和用法的辅助信息。注释是提高代码可读性、可维护性和团队协作效率的重要工具。</term>
   <term name="constant">在编程领域，"常量"是指在程序执行过程中其值不可更改的标识符。简单来说，一旦您给一个常量赋了值，这个值在程序的整个生命周期中都不能再被修改。这与变量形成鲜明对比，变量的值可以在程序执行过程中多次更改。</term>
   <term name="environment-variable">环境变量是操作系统层面的配置参数，用于指定用户工作环境中的各种属性和设置。它们可以控制程序的行为，定义搜索路径，存储用户偏好等。环境变量可以在系统级别、用户级别或会话级别设置，并且可以通过命令行或图形界面进行管理和修改。</term>
   <term name="expression">在编程领域，"表达式"是由运算符、操作数（可以是变量、常量、字面量或函数调用）以及括号等组合而成的一段代码，其目的是产生一个值。这个值可以是任何数据类型，例如：整数、浮点数、字符串、布尔值，甚至是对象。表达式是构成程序的基本构建块之一，它们用于执行计算、比较、赋值以及其他各种操作。理解表达式的概念对于学习任何编程语言都至关重要。</term>
   <term name="facets">Facets 在应用程序开发领域指的是一种设计理念，它提倡将复杂的应用程序分解为多个独立的、可复用的组件，每个组件负责应用程序的一个特定方面（Facet）。这种模块化设计方法有助于提高应用程序的可维护性、可扩展性和可测试性。</term>
   <term name="formal-parameter">形式参数（Formal Parameter），简称形参，是编程语言中函数或方法定义的一部分。它就像一个"占位符"，用于接收调用函数时传递进来的数据。您可以把形式参数想象成函数定义中的变量名，它们在函数被调用之前并没有实际的值。</term>
   <term name="hot-swap">在编程领域，热插拔（Hot Swap）指的是能够在应用程序运行时动态地添加、修改或移除代码模块的能力，而无需重启整个应用程序。这种技术允许系统在持续运行的状态下进行更新和维护，显著提高了系统的可用性和灵活性。</term>
   <term name="http">HTTP (Hypertext Transfer Protocol)，中文译为"超文本传输协议"，是互联网上应用最为广泛的一种网络协议。它是客户端（通常是浏览器）和服务器之间请求和应答的标准，用于在万维网上传输超文本（例如 HTML 文件）、图片、视频和其他各种数据。</term>
   <term name="idea">IDEA 是 IntelliJ IDEA 的简称。</term>
   <term name="idea-code-automatic-prompt">IntelliJ IDEA 的代码智能提示功能是一个非常实用的特性，它可以在您编写代码时提供实时的辅助和提示。</term>
   <term name="idea-code-completion">IntelliJ IDEA 的智能代码助手，也称为 Code Completion 或 Code Assistance，是一个非常强大的功能，它可以帮助开发者更快速、更准确地编写代码。</term>
   <term name="idea-code-refactoring">代码重构是指在不改变软件外部行为的前提下，对代码进行结构性调整的过程。其核心目标是提高代码的可读性、可维护性和可扩展性，最终提升软件质量。</term>
   <term name="idea-context">上下文是与变更列表相关联的一组已打开文件。</term>
   <term name="idea-module">在 IntelliJ IDEA 中，模块是项目的一个组成部分，它代表了一个独立的构建单元，可以包含自己的源代码、构建配置和依赖项。模块允许开发者将大型项目分割成更小、更易于管理的部分，每个模块都有自己的文件结构，例如：源代码、测试代码和资源文件。通过使用模块，可以更好地组织复杂的工程项目，提高代码的重用性，简化项目管理，并且可以在不同模块之间设置依赖关系，以构建和运行应用程序。模块化设计有助于提高项目的可维护性和扩展性。</term>
   <term name="identifier">在编程语言中，标识符（Identifier）就像给事物起名字一样，用于标识程序中的各种元素，例如：变量、函数、类、模块等等。</term>
   <term name="jakarta-ee">Jakarta EE（Enterprise Edition）是 Java EE 的一个分支，它是一个用于开发企业级应用程序的平台。在 2017 年，Oracle 将 Java EE 的标准和技术转移给了 Eclipse 基金会，之后项目被重命名为 Jakarta EE。这一转变是为了确保该技术栈能够继续发展，并适应开源社区和企业的需要。</term>
   <term name="java-annotations">注解（Annotation），也称为元数据（Metadata），是 JDK 5 引入的一种特殊的注释。它提供了一种为 Java 代码添加元数据的方式，这些元数据可以被编译器、JVM 或其他工具在编译期或运行时使用。您可以把注解想象成代码中的标签或标记，它们可以用来提供额外的信息，例如：编译指示、代码分析、运行时处理等。</term>
   <term name="java-artifact">构建好的 Java 归档（*.jar）称为 Artifact（工件）。</term>
   <term name="java-bytecode">Java 字节码是 Java 虚拟机（JVM）执行的一种指令格式。它是 Java 源代码编译后的中间表示形式，而非直接在硬件上执行的机器码。Java 字节码的设计目标是实现"一次编写，到处运行"（Write Once, Run Anywhere）的跨平台特性。</term>
   <term name="java-class">在 Java 中，"类"是面向对象编程（OOP）的核心概念。它是一种用于创建对象的蓝图或模板。类定义了对象的属性（状态）和行为（方法）。可以把类比作汽车的设计图纸，而对象就是根据图纸制造出来的具体的汽车。</term>
   <term name="java-class-declaration">Java 中的类声明用于定义一个新的类。基本格式如下：`[修饰符] class 类名 { 类体 }`。其中，`修饰符`可以是`public`、`private`、`protected`等，表示类的访问级别；`class`是关键字，用于声明类；`类名`应遵循驼峰命名法。类体包含字段、构造器和方法，它们共同定义了类的属性和行为。每个 Java 程序至少包含一个类，且该类应包含`main`方法作为程序的入口点。</term>
   <term name="java-document-comments">文档注释（Documentation Comments），也称为 Javadoc 注释，是 Java 中一种特殊的注释方式。它以 /** 开始，以 */ 结束，用于为类、接口、方法、构造器和字段等编写文档。Javadoc 工具可以解析这些注释，并生成 HTML 格式的 API 文档，方便开发者参阅和使用。</term>
   <term name="java-field">在Java中，字段（Field）是类的一个成员，用于存储对象的状态。您可以把它想象成一个对象的属性或者特征。字段可以是基本数据类型（如int、double、boolean），也可以是引用类型（如String、其他类的对象）。</term>
   <term name="java-hotswap-vm">Java HotSwap VM（也称为热部署或热替换）是一种允许在应用程序运行时修改已加载的类，而无需重启 JVM 的技术。这项技术在开发环境中非常有用，可以显著提高开发效率，减少因反复重启应用而导致的时间消耗。</term>
   <term name="java-interface">接口在 Java 中是一种抽象类型，是抽象方法的集合。它定义了一组方法签名（方法名、参数和返回类型），但不提供这些方法的具体实现。换句话说，接口规定了"应该做什么"，而把"如何做"的实现留给实现接口的类。</term>
   <term name="java-jar-file">JAR (Java Archive) 文件是 Java 的一种归档文件格式，它将多个 Java 类文件、相关的元数据和资源（例如：图像、音频、文本文件等）打包成一个单独的文件。JAR 文件本质上是一个 ZIP 压缩包，扩展名为 .jar。</term>
   <term name="java-method">在 Java 中，方法是包含一系列语句的代码块，用于执行特定的任务。方法用于组织代码，使其可重用、模块化，并提高代码的可读性和可维护性。您可以把方法想象成一个独立的子程序或函数，它接收输入（参数），执行一系列操作，并可能返回一个结果。</term>
   <term name="java-method-body">方法体是方法声明的一部分，它包含了方法执行的具体代码指令。简单来说，方法体就是方法"做什么"的实际内容。它定义了方法的功能，包含了一系列语句，这些语句按照特定的顺序执行，完成方法的既定任务。</term>
   <term name="java-method-declaration">Java 中的方法声明用于定义类中的行为或功能。其基本格式如下：[修饰符] 返回类型 方法名(参数列表) [throws 异常列表] { 方法体 }。</term>
   <term name="java-object-lifecycle">Java 对象的生命周期主要包括以下几个阶段：创建 (Creation)、应用 (Using)、不可见 (Invisible)、不可达 (Unreachable) 和回收 (Collected)。首先，通过 new 关键字创建对象，为对象分配内存空间；接着，对象在程序中被使用，处于活跃状态；当对象不再被引用时，进入不可见阶段，但此时仍占用内存；随后，对象变得不可达，即没有任何引用指向该对象；最后，垃圾回收器 (GC) 会在适当的时候回收这些不可达对象所占用的内存，结束对象的生命周期。</term>
   <term name="java-package">在 Java 中，"包"（Package）是一种用于组织类和接口的机制。它提供了一种命名空间，可以避免类名冲突，并帮助开发者更好地组织和管理大量的代码文件。您可以把包想象成电脑上的文件夹，用于存放不同的文件，方便管理和查找。</term>
   <term name="java-package-declaration">在 Java中，包（package）是一种机制，用于将相关的类、接口等组织在一起，形成一个命名空间。这有助于提高代码的可管理性、可重用性和避免命名冲突。包声明就是用来指定一个类或接口所属的包。</term>
   <term name="java-runtime">Java 运行时（Java Runtime），指的是运行 Java 应用程序所需的一组软件工具和库的集合。它包括了 Java 虚拟机（JVM）、核心类库以及其他支持文件。Java 运行时环境（JRE）是 Java 运行时的具体实现，它提供了执行 Java 程序所需的最低限度的组件。与之相对的是 Java 开发工具包（JDK），后者除了包含 JRE 的所有内容外，还提供了一系列开发工具，如编译器、调试器等，用于编写和测试 Java 程序。</term>
   <term name="java-static-import">在 Java 中，静态导入（Static Import）是一种简化代码书写的方法，允许您直接使用静态成员（例如：方法或变量），而无需前缀类名。</term>
   <term name="java-static-method">Java 中的静态方法是属于类而非对象的方法，这意味着它们可以在没有创建类实例的情况下被调用。静态方法不能直接访问非静态成员，因为它们不依赖于任何特定的对象实例。它们通常用于执行与类相关的操作，例如：工具方法或工厂方法。通过使用类名直接调用静态方法，可以在不涉及对象的情况下复用代码。静态方法在内存中只有一份副本，减少了资源消耗，但也可能导致命名空间污染，因为它们在类级别上是全局的。</term>
   <term name="jetbrains-ide">JetBrains 提供了一系列针对不同编程语言和技术的 IDE，旨在帮助开发者提高工作效率，编写出高质量的代码。例如：IntelliJ IDEA、Fleet、WebStorm、PhpStorm 等。</term>
   <term name="jetbrains-runtime">JetBrains Runtime 是一个基于 OpenJDK 的开源 Java 运行时环境（JRE），由 JetBrains 公司开发和维护。它是为了优化 IntelliJ IDEA、PyCharm、WebStorm 等 JetBrains 开发工具的性能和稳定性而创建的。</term>
   <term name="jre">JRE (Java Runtime Environment)，中文译为 Java 运行时环境，是运行 Java 程序所必需的软件环境。它包含了 Java 虚拟机（JVM）和一些核心类库。您可以将 JRE 理解为一个"运行 Java 程序的容器"。</term>
   <term name="jdk">JDK (Java Development Kit) 是 Java 开发工具包，它是 Java 程序员进行软件开发所必需的工具集。JDK 包含了 JRE (Java Runtime Environment) 和一些用于开发、调试和运行 Java 应用程序的工具。</term>
   <term name="junit">JUnit 是一个针对 Java 编程语言的开源单元测试框架。它是在 xUnit 测试框架体系中的一个实例 (专门用于 Java 语言)。JUnit 的目标是简化单元测试的编写和执行，帮助开发者更有效地发现和修复代码中的错误，提高代码质量。</term>
   <term name="jvm">JVM (Java Virtual Machine)，中文译为 Java 虚拟机，是 Java 平台的核心组成部分。它是一种抽象的计算机，通过在实际的计算机上模拟各种计算机功能来实现。您可以把它想象成一个运行 Java 程序的"虚拟电脑"。</term>
   <term name="keywords">编程领域的关键字是编程语言中预设的保留字，它们具有特殊的含义，不能用作变量名或函数名等标识符。关键字是构成编程语言语法的基础，它们控制程序的结构和执行流程。</term>
   <term name="library">库（Lib）是一种组织好的、可重用的代码和数据集合，旨在简化开发过程、提高效率。它包含预编译的模块或函数，供程序员调用以实现特定功能，无需从头编写。库广泛应用于软件工程，适用于各种编程语言，是现代软件开发中不可或缺的组成部分。</term>
   <term name="markdown">Markdown 是一种轻量级标记语言，它以易读易写的纯文本格式编写文档，然后转换成有效的 HTML（或其他格式）。Markdown 的目标是"易读易写"，强调使用简洁的语法格式化文本，而不是复杂的排版命令。因此，它非常适合撰写文档、笔记、博客文章、电子邮件等等。</term>
   <term name="method">程序开发中的方法是一种封装了一段特定逻辑的代码块，它可以被多次调用，用于执行一系列操作并返回结果。方法通常包含一个名称、参数列表、返回类型和主体。通过定义方法，开发者可以将复杂的操作拆分成更小的、可管理的部分，提高代码的可读性、可维护性和可重用性。方法还可以减少代码冗余，使程序更加高效和模块化。</term>
   <term name="method-name">在编程领域，方法（Method） 是一段封装了特定功能的代码块。它执行特定的任务并可能返回一个值。方法名（Method Name） 就是用来标识这个代码块的名称，允许我们在程序的其他地方调用它来执行相应的操作。方法名是编程中非常重要的组成部分，清晰且具有描述性的方法名能够极大地提高代码的可读性和可维护性。</term>
   <term name="method-return-value">方法返回值是方法执行完成后返回给调用者的结果。返回值可以是一个具体的数值、对象或状态指示。在程序开发中，通过定义返回类型，可以明确方法执行后应返回的数据类型。返回值使方法具有输出功能，可以将处理结果传递给其他部分代码，实现数据传递和功能模块之间的解耦。合理使用返回值可以提高代码的可读性和可维护性，使程序更加清晰和高效。</term>
   <term name="neutral-colors">中性色，顾名思义，就是介于冷暖色系之间，不偏向任何一种颜色的色系。它们通常给人一种平和、低调、百搭的感觉。</term>
   <term name="openjdk">OpenJDK（Open Java Development Kit）是 Java 平台标准版（Java SE）的开源实现。简单来说，它是一个免费的、开源的 Java 开发工具包，包含了编译、运行 Java 程序所需的一切工具和库。</term>
   <term name="oracle-jdk">Oracle JDK（Java Development Kit，Java 开发工具包）是由 Oracle 公司提供的一套完整的 Java 开发工具和运行环境，用于开发、测试和运行 Java 应用程序。</term>
   <term name="parameter">程序开发中的参数分为形参和实参。形参是在函数定义时使用的变量，用于接收传递给函数的值，而实参是在函数调用时实际传给函数的值。形参相当于占位符，用于在函数内部引用传递进来的数据，实参则是具体的值，用于传递数据给函数。通过形参与实参的结合，函数能够根据不同的实参执行相应的操作，实现功能的灵活性和可重用性。</term>
   <term name="plain-text-editor">在了解纯文本编辑器之前，我们需要先明白什么是"纯文本"。简单来说，纯文本只包含最基本的字符数据，不包含任何格式信息，例如：字体、大小、颜色、排版等等。它是一种通用的、平台无关的文本格式，任何支持文本显示的程序都可以读取和显示纯文本文件的内容。与之相对的是富文本，例如 .doc 或 .rtf文件，它们包含丰富的格式信息。</term>
   <term name="programming-language">编程语言是人与计算机沟通的桥梁，它是一组用于定义计算机程序的形式化的指令。简单来说，就是人类编写的计算机能够理解和执行的指令集，用来控制计算机完成各种任务。</term>
   <term name="refactoring">重构（Refactoring）是指在不改变软件外部功能的前提下，对代码进行结构性调整的过程。其目的是提高代码的可读性、可维护性和可扩展性。重构不是增加新功能或修复 bug，而是对现有代码进行整理和优化。它就像给房屋进行装修，可以使房屋更加美观、舒适和实用。</term>
   <term name="regex">正则表达式（Regex）是一种用于匹配和操作文本的强大工具。它通过定义模式来搜索、验证、替换或提取文本。正则表达式包含特殊字符和语法，例如： .（匹配任意字符）、*（匹配零次或多次）、[ ]（字符集合）等。它广泛应用于文本处理、数据验证、日志分析等领域。正则表达式能够帮助开发者快速实现复杂的文本操作和数据匹配任务。</term>
   <term name="reload">重新加载</term>
   <term name="applications">Applications 文件夹是 macOS 系统中所有应用程序的默认存放位置。</term>
   <term name="viewport">视口，简单来说就是显示页面内容的屏幕区域。它就像是一扇窗口，通过这扇窗口，我们能看到网页的内容。</term>
   <term name="code-formatting">代码格式化是指按照特定的规则对代码进行排版，使其结构清晰、层次分明，从而提高代码的可读性、可维护性。</term>
   <term name="neutral-colors">中性色，顾名思义，就是介于冷暖色系之间，不偏向任何一种颜色的色系。它们通常给人一种平和、低调、百搭的感觉。</term>
   <term name="identifier">在编程语言中，标识符（Identifier）就像给事物起名字一样，用于标识程序中的各种元素，例如：变量、函数、类、模块等等。</term>
   <term name="idea-code-automatic-prompt">IntelliJ IDEA 的代码智能提示功能是一个非常实用的特性，它可以在您编写代码时提供实时的辅助和提示。</term>
   <term name="java-static-import">在 Java 中，静态导入（Static Import）是一种简化代码书写的方法，允许您直接使用静态成员（例如：方法或变量），而无需前缀类名。</term>
   <term name="java-method-declaration">Java 中的方法声明用于定义类中的行为或功能。其基本格式如下：[修饰符] 返回类型 方法名(参数列表) [throws 异常列表] { 方法体 }。</term>
   <term name="idea-code-refactoring">代码重构是指在不改变软件外部行为的前提下，对代码进行结构性调整的过程。其核心目标是提高代码的可读性、可维护性和可扩展性，最终提升软件质量。</term>
   <term name="keywords">编程领域的关键字是编程语言中预设的保留字，它们具有特殊的含义，不能用作变量名或函数名等标识符。关键字是构成编程语言语法的基础，它们控制程序的结构和执行流程。</term>
   <term name="oracle-jdk">Oracle JDK（Java Development Kit，Java 开发工具包）是由 Oracle 公司提供的一套完整的 Java 开发工具和运行环境，用于开发、测试和运行 Java 应用程序。</term>
   <term name="idea-code-completion">IntelliJ IDEA 的智能代码助手，也称为 Code Completion 或 Code Assistance，是一个非常强大的功能，它可以帮助开发者更快速、更准确地编写代码。</term>
   <term name="ssd">SSD (Solid State Drive)，中文译为固态硬盘，是一种使用固态电子存储芯片阵列制成的存储设备。它使用闪存芯片来存储数据，而不是像传统机械硬盘 (HDD) 那样使用旋转的磁盘。</term>
   <term name="library">在编程领域，"库"（Library）是一个非常重要的概念，它指的是一组预先编写好的代码的集合，可以被其他程序重复使用。库的主要目的是提高代码的复用率、减少开发时间和成本。</term>
   <term name="cross-platform">"跨平台"指的是软件或技术能够在多个不同的操作系统、硬件平台或设备上运行的能力。它的核心思想是"一次编写，多处运行"，旨在提高开发效率、降低成本并扩大用户覆盖面。</term>
   <term name="code-completion">代码补全是一种智能化的编程辅助功能，它能根据上下文和已有的代码，自动补全您正在编写的代码。这大大提高了编程效率，减少了打字错误，让开发者可以更专注于解决问题。</term>
   <term name="jetbrains-ide">JetBrains 提供了一系列针对不同编程语言和技术的 IDE，旨在帮助开发者提高工作效率，编写出高质量的代码。例如：IntelliJ IDEA、Fleet、WebStorm、PhpStorm 等。</term>
   <term name="programming-language">编程语言是人与计算机沟通的桥梁，它是一组用于定义计算机程序的形式化的指令。简单来说，就是人类编写的计算机能够理解和执行的指令集，用来控制计算机完成各种任务。</term>
   <term name="fully-qualified-class-name">完全限定类名（Fully Qualified Class Name，FQCN）是用于在编程语言中唯一标识一个类的重要概念。它包含了类的完整路径，包括包名（或命名空间）以及类名本身。</term>
   <term name="openjdk">OpenJDK（Open Java Development Kit）是 Java 平台标准版（Java SE）的开源实现。简单来说，它是一个免费的、开源的 Java 开发工具包，包含了编译、运行 Java 程序所需的一切工具和库。</term>
   <term name="dead-link">死链接（Dead Link），也称为失效链接、无效链接或断链，是指指向一个不存在的网页或资源的链接。当用户单击一个死链接时，通常会看到一个错误页面，例如 "404 Not Found" 或 "页面不存在"。</term>
   <term name="jre">JRE (Java Runtime Environment)，中文译为 Java 运行时环境，是运行 Java 程序所必需的软件环境。它包含了 Java 虚拟机（JVM）和一些核心类库。您可以将 JRE 理解为一个"运行 Java 程序的容器"。</term>
   <term name="jdk">JDK (Java Development Kit) 是 Java 开发工具包，它是 Java 程序员进行软件开发所必需的工具集。JDK 包含了 JRE (Java Runtime Environment) 和一些用于开发、调试和运行 Java 应用程序的工具。</term>
   <term name="framework">开发框架（Framework）就像是一套预先搭建好的房屋结构，为开发者提供了一个基础的、可扩展的软件架构。它提供了一系列工具、组件和规则，帮助开发者快速构建应用程序，而无需从头开始编写所有代码。</term>
   <term name="unit-test">单元测试（Unit Testing）是软件测试中最基本也是最重要的一个层次，它针对的是程序中的最小可测试单元——通常是一个函数、方法、类或者模块。通过编写专门的测试代码，来验证这些单元的功能是否符合预期。</term>
   <term name="jvm">JVM (Java Virtual Machine)，中文译为 Java 虚拟机，是 Java 平台的核心组成部分。它是一种抽象的计算机，通过在实际的计算机上模拟各种计算机功能来实现。您可以把它想象成一个运行 Java 程序的"虚拟电脑"。</term>
   <term name="frontend">前端技术，简单来说，就是构建 Web 应用程序或网站用户界面（UI）的技术栈。它负责用户在浏览器中看到和交互的一切内容，包括网页的布局、样式、交互行为等。前端开发的目标是为用户提供良好的用户体验（UX）。</term>
   <term name="java-method-body">方法体是方法声明的一部分，它包含了方法执行的具体代码指令。简单来说，方法体就是方法"做什么"的实际内容。它定义了方法的功能，包含了一系列语句，这些语句按照特定的顺序执行，完成方法的既定任务。</term>
   <term name="constant">在编程领域，"常量"是指在程序执行过程中其值不可更改的标识符。简单来说，一旦您给一个常量赋了值，这个值在程序的整个生命周期中都不能再被修改。这与变量形成鲜明对比，变量的值可以在程序执行过程中多次更改。</term>
   <term name="java-class">在 Java 中，"类"是面向对象编程（OOP）的核心概念。它是一种用于创建对象的蓝图或模板。类定义了对象的属性（状态）和行为（方法）。可以把类比作汽车的设计图纸，而对象就是根据图纸制造出来的具体的汽车。</term>
   <term name="java-package-declaration">在 Java中，包（package）是一种机制，用于将相关的类、接口等组织在一起，形成一个命名空间。这有助于提高代码的可管理性、可重用性和避免命名冲突。包声明就是用来指定一个类或接口所属的包。</term>
   <term name="java-field">在Java中，字段（Field）是类的一个成员，用于存储对象的状态。您可以把它想象成一个对象的属性或者特征。字段可以是基本数据类型（如int、double、boolean），也可以是引用类型（如String、其他类的对象）。</term>
   <term name="string">字符串（String）是编程语言中表示文本数据的一种基本数据类型。简单来说，就是由一系列字符组成的序列。这些字符可以是字母、数字、符号、空格等。在程序中，字符串通常用引号括起来，比如单引号 ' ' 或双引号 " "。</term>
   <term name="hot-swap">在编程领域，热插拔（Hot Swap）指的是能够在应用程序运行时动态地添加、修改或移除代码模块的能力，而无需重启整个应用程序。这种技术允许系统在持续运行的状态下进行更新和维护，显著提高了系统的可用性和灵活性。</term>
   <term name="java-interface">接口在 Java 中是一种抽象类型，是抽象方法的集合。它定义了一组方法签名（方法名、参数和返回类型），但不提供这些方法的具体实现。换句话说，接口规定了"应该做什么"，而把"如何做"的实现留给实现接口的类。</term>
   <term name="absolute-path">在计算机文件系统中，绝对路径是从文件系统根目录开始的、表述一个文件或目录完整路径的字符串。它精确地定位了文件或目录在文件系统中的确切位置，不受当前工作目录的影响。例如：C:\Users\OldFriend\A.txt。</term>
   <term name="java-hotswap-vm">Java HotSwap VM（也称为热部署或热替换）是一种允许在应用程序运行时修改已加载的类，而无需重启 JVM 的技术。这项技术在开发环境中非常有用，可以显著提高开发效率，减少因反复重启应用而导致的时间消耗。</term>
   <term name="java-jar-file">JAR (Java Archive) 文件是 Java 的一种归档文件格式，它将多个 Java 类文件、相关的元数据和资源（例如：图像、音频、文本文件等）打包成一个单独的文件。JAR 文件本质上是一个 ZIP 压缩包，扩展名为 .jar。</term>
   <term name="api">API (Application Programming Interface)，中文译为"应用程序编程接口"，是一组定义了软件组件之间如何交互的规则和协议。简单来说，API 允许不同的软件程序相互"对话"和共享信息，而无需开发者了解彼此的内部实现细节。</term>
   <term name="comments">在编程领域，注释（Comments） 是程序源代码中用于解释代码功能的文本。它们不会被编译器或解释器执行，而是为程序员提供理解代码逻辑、功能和用法的辅助信息。注释是提高代码可读性、可维护性和团队协作效率的重要工具。</term>
   <term name="bytecode">字节码（Bytecode）是一种介于人类可读的高级语言（例如：Java、Python）和计算机可以直接执行的机器码之间的中间形式的代码。它不是真正的机器码，因此不能直接在硬件上运行，而是需要通过解释器或虚拟机（VM）来执行。</term>
   <term name="JUnit">JUnit 是一个针对 Java 编程语言的开源单元测试框架。它是在 xUnit 测试框架体系中的一个实例 (专门用于 Java 语言)。JUnit 的目标是简化单元测试的编写和执行，帮助开发者更有效地发现和修复代码中的错误，提高代码质量。</term>
   <term name="variables">在程序开发中，"变量"是存储和操作数据的基础单元。您可以把它想象成一个命名的盒子，用来存放各种类型的信息，例如：数字、文字、真假值等等。程序运行过程中，盒子里的内容可以根据需要进行改变，这就是"变量"名称的由来。</term>
   <term name="facets">Facets 在应用程序开发领域指的是一种设计理念，它提倡将复杂的应用程序分解为多个独立的、可复用的组件，每个组件负责应用程序的一个特定方面（Facet）。这种模块化设计方法有助于提高应用程序的可维护性、可扩展性和可测试性。</term>
   <term name="sdk">SDK（Software Development Kit，软件开发工具包）是一系列工具、库、文档、代码示例和过程的集合，旨在帮助开发者针对特定平台、操作系统、硬件或编程语言创建应用程序。简单来说，SDK 就是为了方便开发者而提供的一整套开发工具。</term>
   <term name="java-package">在 Java 中，"包"（Package）是一种用于组织类和接口的机制。它提供了一种命名空间，可以避免类名冲突，并帮助开发者更好地组织和管理大量的代码文件。您可以把包想象成电脑上的文件夹，用于存放不同的文件，方便管理和查找。</term>
   <term name="jetbrains-runtime">JetBrains Runtime 是一个基于 OpenJDK 的开源 Java 运行时环境（JRE），由 JetBrains 公司开发和维护。它是为了优化 IntelliJ IDEA、PyCharm、WebStorm 等 JetBrains 开发工具的性能和稳定性而创建的。</term>
   <term name="velocity-and-freemarker">Velocity 和 FreeMarker 都是 Java 平台上的模板引擎，用于生成文本（例如： HTML、电子邮件、配置文件等）的强大工具。它们通过在模板中插入特定的标记，然后替换这些标记为实际的数据，从而生成最终的输出。</term>
   <term name="formal-parameter">形式参数（Formal Parameter），简称形参，是编程语言中函数或方法定义的一部分。它就像一个"占位符"，用于接收调用函数时传递进来的数据。您可以把形式参数想象成函数定义中的变量名，它们在函数被调用之前并没有实际的值。</term>
   <term name="library">库（Lib）是一种组织好的、可重用的代码和数据集合，旨在简化开发过程、提高效率。它包含预编译的模块或函数，供程序员调用以实现特定功能，无需从头编写。库广泛应用于软件工程，适用于各种编程语言，是现代软件开发中不可或缺的组成部分。</term>
   <term name="class-name">在编程领域，类名（Class Name）是用于标识面向对象编程（OOP）中类的名称。类是创建对象的蓝图或模板，它们封装了数据（属性）和操作这些数据的方法。定义清晰、直观且符合命名规范的类名对于代码的可读性、可维护性和协作开发非常重要。</term>
   <term name="java-bytecode">Java 字节码是 Java 虚拟机（JVM）执行的一种指令格式。它是 Java 源代码编译后的中间表示形式，而非直接在硬件上执行的机器码。Java 字节码的设计目标是实现"一次编写，到处运行"（Write Once, Run Anywhere）的跨平台特性。</term>
   <term name="http">HTTP (Hypertext Transfer Protocol)，中文译为"超文本传输协议"，是互联网上应用最为广泛的一种网络协议。它是客户端（通常是浏览器）和服务器之间请求和应答的标准，用于在万维网上传输超文本（例如 HTML 文件）、图片、视频和其他各种数据。</term>
   <term name="symbol">符号是计算机科学中的一个概念，它用于表示变量、函数、类等实体的名称。符号通常以字母、数字、下划线等字符表示，并且可以在编译时进行解析和替换。符号在计算机科学中具有重要的地位，因为它们可以作为代码的标识符，用于标识变量、函数、类等实体。</term>
   <term name="java-method">在 Java 中，方法是包含一系列语句的代码块，用于执行特定的任务。方法用于组织代码，使其可重用、模块化，并提高代码的可读性和可维护性。您可以把方法想象成一个独立的子程序或函数，它接收输入（参数），执行一系列操作，并可能返回一个结果。</term>
   <term name="environment-variable">环境变量是操作系统层面的配置参数，用于指定用户工作环境中的各种属性和设置。它们可以控制程序的行为，定义搜索路径，存储用户偏好等。环境变量可以在系统级别、用户级别或会话级别设置，并且可以通过命令行或图形界面进行管理和修改。</term>
   <term name="call-stack">帧堆栈是调试过程中用于追踪函数调用顺序的数据结构。当程序执行函数时，会创建一个帧来保存函数的局部变量、返回地址等信息。这些帧堆叠形成堆栈。调试时，通过查看帧堆栈，可以了解当前函数调用链，分析变量值，定位错误来源，对程序执行流程进行深入理解。</term>
   <term name="markdown">Markdown 是一种轻量级标记语言，它以易读易写的纯文本格式编写文档，然后转换成有效的 HTML（或其他格式）。Markdown 的目标是"易读易写"，强调使用简洁的语法格式化文本，而不是复杂的排版命令。因此，它非常适合撰写文档、笔记、博客文章、电子邮件等等。</term>
   <term name="refactoring">重构（Refactoring）是指在不改变软件外部功能的前提下，对代码进行结构性调整的过程。其目的是提高代码的可读性、可维护性和可扩展性。重构不是增加新功能或修复 bug，而是对现有代码进行整理和优化。它就像给房屋进行装修，可以使房屋更加美观、舒适和实用。</term>
   <term name="java-document-comments">文档注释（Documentation Comments），也称为 Javadoc 注释，是 Java 中一种特殊的注释方式。它以 /** 开始，以 */ 结束，用于为类、接口、方法、构造器和字段等编写文档。Javadoc 工具可以解析这些注释，并生成 HTML 格式的 API 文档，方便开发者参阅和使用。</term>
   <term name="variable-name">在编程中，变量（Variable） 是用于存储数据的内存位置的名称。您可以把变量想象成一个贴了标签的盒子，这个标签就是变量名，盒子里面装的是数据。程序通过变量名来访问和操作存储在内存中的数据。变量名（Variable Name） 就是这个"标签"，它是一个标识符，用于唯一地标识一个变量。</term>
   <term name="jakarta-ee">Jakarta EE（Enterprise Edition）是 Java EE 的一个分支，它是一个用于开发企业级应用程序的平台。在 2017 年，Oracle 将 Java EE 的标准和技术转移给了 Eclipse 基金会，之后项目被重命名为 Jakarta EE。这一转变是为了确保该技术栈能够继续发展，并适应开源社区和企业的需要。</term>
   <term name="method">程序开发中的方法是一种封装了一段特定逻辑的代码块，它可以被多次调用，用于执行一系列操作并返回结果。方法通常包含一个名称、参数列表、返回类型和主体。通过定义方法，开发者可以将复杂的操作拆分成更小的、可管理的部分，提高代码的可读性、可维护性和可重用性。方法还可以减少代码冗余，使程序更加高效和模块化。</term>
   <term name="method-name">在编程领域，方法（Method） 是一段封装了特定功能的代码块。它执行特定的任务并可能返回一个值。方法名（Method Name） 就是用来标识这个代码块的名称，允许我们在程序的其他地方调用它来执行相应的操作。方法名是编程中非常重要的组成部分，清晰且具有描述性的方法名能够极大地提高代码的可读性和可维护性。</term>
   <term name="java-annotations">注解（Annotation），也称为元数据（Metadata），是 JDK 5 引入的一种特殊的注释。它提供了一种为 Java 代码添加元数据的方式，这些元数据可以被编译器、JVM 或其他工具在编译期或运行时使用。您可以把注解想象成代码中的标签或标记，它们可以用来提供额外的信息，例如：编译指示、代码分析、运行时处理等。</term>
   <term name="parameter">程序开发中的参数分为形参和实参。形参是在函数定义时使用的变量，用于接收传递给函数的值，而实参是在函数调用时实际传给函数的值。形参相当于占位符，用于在函数内部引用传递进来的数据，实参则是具体的值，用于传递数据给函数。通过形参与实参的结合，函数能够根据不同的实参执行相应的操作，实现功能的灵活性和可重用性。</term>
   <term name="regex">正则表达式（Regex）是一种用于匹配和操作文本的强大工具。它通过定义模式来搜索、验证、替换或提取文本。正则表达式包含特殊字符和语法，例如： .（匹配任意字符）、*（匹配零次或多次）、[ ]（字符集合）等。它广泛应用于文本处理、数据验证、日志分析等领域。正则表达式能够帮助开发者快速实现复杂的文本操作和数据匹配任务。</term>
   <term name="visualization">可视化是指将数据、信息或知识转化为视觉元素的过程，通过图表、图像、交互式界面等直观方式展示，以便于用户快速理解、分析和探索复杂信息。这种方法利用人类视觉系统的强大能力，帮助人们识别模式、趋势和异常，促进洞察力的形成和决策制定。在大数据时代，可视化已成为数据分析、科学研究、商业智能和各类信息传播中不可或缺的工具。</term>
   <term name="plain-text-editor">在了解纯文本编辑器之前，我们需要先明白什么是"纯文本"。简单来说，纯文本只包含最基本的字符数据，不包含任何格式信息，例如：字体、大小、颜色、排版等等。它是一种通用的、平台无关的文本格式，任何支持文本显示的程序都可以读取和显示纯文本文件的内容。与之相对的是富文本，例如 .doc 或 .rtf文件，它们包含丰富的格式信息。</term>
   <term name="code-static-analysis">代码静态分析是一种不运行代码而检查代码质量和错误的技术。它通过分析代码的结构、语法和潜在的问题，来发现可能的缺陷、安全漏洞或不符合最佳实践的编码风格。静态分析工具如 SonarQube、FindBugs、PyLint 等，可以在不实际执行代码的情况下，提供关于代码质量的反馈，帮助开发者提前发现和修复问题，提高代码的可靠性和维护性。</term>
   <term name="expression">在编程领域，"表达式"是由运算符、操作数（可以是变量、常量、字面量或函数调用）以及括号等组合而成的一段代码，其目的是产生一个值。这个值可以是任何数据类型，例如：整数、浮点数、字符串、布尔值，甚至是对象。表达式是构成程序的基本构建块之一，它们用于执行计算、比较、赋值以及其他各种操作。理解表达式的概念对于学习任何编程语言都至关重要。</term>
   <term name="method-return-value">方法返回值是方法执行完成后返回给调用者的结果。返回值可以是一个具体的数值、对象或状态指示。在程序开发中，通过定义返回类型，可以明确方法执行后应返回的数据类型。返回值使方法具有输出功能，可以将处理结果传递给其他部分代码，实现数据传递和功能模块之间的解耦。合理使用返回值可以提高代码的可读性和可维护性，使程序更加清晰和高效。</term>
   <term name="thymeleaf">Thymeleaf 是一款现代化的服务器端 Java 模板引擎，主要用于 Web 应用程序的开发。它可以让您在 HTML 文件中使用特殊的属性和标签，从而动态地生成 HTML 内容。与传统的 JSP、Velocity 和 FreeMarker 等模板引擎不同，Thymeleaf 最大的特点是支持 HTML 原型，这意味着您的模板文件可以直接在浏览器中打开并正确显示，同时也能够被 Thymeleaf 引擎解析并动态渲染。</term>
   <term name="camel-case">驼峰命名法（Camel Case）是一种编程中常用的命名规则，特点是多个单词组合时，除了第一个单词外，其他单词的首字母大写。这种命名法不使用空格，而是通过大小写的变化来区分单词。根据首字母的大小写，驼峰命名法又分为两种：小驼峰式（Lower Camel Case），首字母小写；和大驼峰式（Upper Camel Case），首字母大写。驼峰命名法在 JavaScript、Java 等多种编程语言中被广泛采用。</term>
   <term name="java-class-declaration">Java 中的类声明用于定义一个新的类。基本格式如下：`[修饰符] class 类名 { 类体 }`。其中，`修饰符`可以是`public`、`private`、`protected`等，表示类的访问级别；`class`是关键字，用于声明类；`类名`应遵循驼峰命名法。类体包含字段、构造器和方法，它们共同定义了类的属性和行为。每个 Java 程序至少包含一个类，且该类应包含`main`方法作为程序的入口点。</term>
   <term name="screen-reader">屏幕阅读器是一种辅助技术软件，它允许视力障碍或盲人用户通过听觉来获取屏幕上显示的信息。这种软件能够朗读文本、描述图形和用户界面元素，以及提供键盘导航功能，帮助用户浏览网页、操作应用程序和阅读文档。屏幕阅读器通过合成语音或盲文显示器输出信息，使得视觉内容对视觉障碍者变得可访问。常见的屏幕阅读器有 JAWS、NVDA 和 VoiceOver 等，它们极大地提高了视障人士的数字生活质量和独立性。</term>
   <term name="java-runtime">Java 运行时（Java Runtime），指的是运行 Java 应用程序所需的一组软件工具和库的集合。它包括了 Java 虚拟机（JVM）、核心类库以及其他支持文件。Java 运行时环境（JRE）是 Java 运行时的具体实现，它提供了执行 Java 程序所需的最低限度的组件。与之相对的是 Java 开发工具包（JDK），后者除了包含 JRE 的所有内容外，还提供了一系列开发工具，如编译器、调试器等，用于编写和测试 Java 程序。</term>
   <term name="java-static-method">Java 中的静态方法是属于类而非对象的方法，这意味着它们可以在没有创建类实例的情况下被调用。静态方法不能直接访问非静态成员，因为它们不依赖于任何特定的对象实例。它们通常用于执行与类相关的操作，例如：工具方法或工厂方法。通过使用类名直接调用静态方法，可以在不涉及对象的情况下复用代码。静态方法在内存中只有一份副本，减少了资源消耗，但也可能导致命名空间污染，因为它们在类级别上是全局的。</term>
   <term name="idea-module">在 IntelliJ IDEA 中，模块是项目的一个组成部分，它代表了一个独立的构建单元，可以包含自己的源代码、构建配置和依赖项。模块允许开发者将大型项目分割成更小、更易于管理的部分，每个模块都有自己的文件结构，例如：源代码、测试代码和资源文件。通过使用模块，可以更好地组织复杂的工程项目，提高代码的重用性，简化项目管理，并且可以在不同模块之间设置依赖关系，以构建和运行应用程序。模块化设计有助于提高项目的可维护性和扩展性。</term>
   <term name="code-highlighting">代码高亮（Code Highlighting）是一种在代码编辑器或显示环境中对源代码进行语法着色的技术，旨在提高代码的可读性和易于理解。通过将代码中的关键字、变量、字符串、注释等元素以不同的颜色或样式呈现，代码高亮使得开发者能够迅速识别代码的结构和各个部分的功能。这种视觉上的区分有助于减少阅读错误，加快调试过程，并且使得代码审查更加高效。现代的集成开发环境（IDEs）和代码编辑器通常都内置了代码高亮功能，支持多种编程语言。</term>
   <term name="user-interface">用户界面（User Interface，简称：UI）是人与计算机系统交互的桥梁，它通过图形化设计将信息以直观、易理解的方式呈现给用户。一个优秀的用户界面应具备以下特点：清晰性，让用户快速理解功能；易用性，降低操作难度；一致性，保持界面风格统一；美观性，提升用户体验。UI设计主要包括以下几个方面：布局设计，合理安排元素位置；交互设计，优化操作逻辑；视觉设计，注重色彩、字体等视觉元素。随着科技的发展，用户界面不断演进，如今已广泛应用于网页、移动应用、桌面软件等领域。</term>
   <term name="java-object-lifecycle">Java 对象的生命周期主要包括以下几个阶段：创建 (Creation)、应用 (Using)、不可见 (Invisible)、不可达 (Unreachable) 和回收 (Collected)。首先，通过 new 关键字创建对象，为对象分配内存空间；接着，对象在程序中被使用，处于活跃状态；当对象不再被引用时，进入不可见阶段，但此时仍占用内存；随后，对象变得不可达，即没有任何引用指向该对象；最后，垃圾回收器 (GC) 会在适当的时候回收这些不可达对象所占用的内存，结束对象的生命周期。</term>

   <!-- 版本控制系统（Version Control Server，VCS） -->
   <term name="changelist">尚未提交到 VCS 的一组本地变更。对项目文件的所有更改都会自动放入活动更改列表。</term>
   <term name="revision">在版本控制系统中，修订版本（Revision）指的是一个文件或项目在某个特定时间点的一个快照。它记录了文件或项目的所有内容，包括代码、文档等。每一次对文件进行修改、添加或删除，都会产生一个新的修订版本。</term>
   <term name="svn">SVN（Subversion）是一个开源的版本控制系统。版本控制是一种记录一个或若干文件内容变化，以便将来参阅特定版本修订情况的系统。简单来说，SVN 就是一个软件，它可以帮您管理文件的不同版本，方便多人协作开发，以及在需要的时候回溯到之前的版本。</term>
   <term name="vcs">版本控制（Version Control）是一种跟踪和管理文件修改历史的系统。它记录了文件的每一次修改，允许您回溯到之前的任何一个版本，比较不同版本之间的差异，甚至撤销某些修改。版本控制不仅适用于代码文件，也适用于任何类型的电子文档，例如：文本文档、图片、视频等。</term>
   <term name="git">Git 是一种分布式版本控制系统（DVCS）。版本控制是一种记录一个或若干文件内容变化的方式，以便将来参阅特定版本修订情况的系统。有了版本控制系统，您就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。您可以比较文件的变化细节、上次修改是谁、什么时候修改的等等。</term>

   <!-- 自动化构建工具 -->
   <term name="maven">Maven 是 Apache 软件基金会的一个开源项目，是一个强大的项目管理和构建工具，主要用于 Java 项目，但也支持其他语言的项目，例如：C#、Ruby 和 Scala。它极大地简化了项目构建、依赖管理和项目信息管理的过程。</term>
   <term name="gradle">Gradle 是一个开源的构建自动化工具，它非常灵活，可以构建几乎任何类型的软件。它不限制您构建什么或如何构建，这使得 Gradle 非常通用。简单来说，Gradle 就是一个运行在 JVM（Java 虚拟机）上的自动化项目构建工具，用来帮助我们自动构建项目。</term>

   <!-- 文件格式/数据格式 -->
   <term name="csv">CSV（Comma Separated Values）文件，中文译为"逗号分隔值"，是一种简单而通用的文本文件格式，用来存储表格数据。你可以把它想象成一个电子表格，每一行代表表格的一行，每一列代表表格的一列，而逗号则用来分隔不同的列。</term>
   <term name="file-extension">文件后缀名，也称为文件扩展名，是文件名的一部分，通常位于文件名末尾，以一个句点"."分隔。它是操作系统用来识别文件类型的一种机制，帮助操作系统和应用程序确定如何处理该文件。</term>
   <term name="image-file">映像文件（image file）是一种非常重要的计算机文件。它可以帮助我们备份数据、分发软件、创建虚拟机等。</term>
   <term name="json">JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。</term>
   <term name="png">PNG 是一种无损压缩的位图图像格式。</term>
   <term name="shell-script">Shell 脚本（Shell Script）是一种为 shell 编写的脚本程序。它是一个包含一系列 shell 命令的文本文件，可以用来自动化一系列操作。简单来说，就是把一系列命令写在一个文件中，然后一次性执行这些命令。</term>
   <term name="snap-package">Snap 包是 Canonical 公司推出的一种新的软件打包格式，它为 Linux 系统的软件安装和管理提供了一种全新的方式。Snap 包旨在解决传统软件包管理的一些问题，例如：依赖冲突、版本不兼容等。</term>
   <term name="svg">SVG 是一种基于 XML 的矢量图形格式。</term>
   <term name="tarball">tarball 文件，您也可以叫它 tar 包，是一种常见的文件打包和压缩格式，特别在 Linux 系统中被广泛使用。</term>
   <term name="xml">XML（Extensible Markup Language），中文译为可扩展标记语言，是一种用于标记电子文件使其具有结构性的标记语言。它可以用来标记数据、定义数据的类型，使用简单，非常适合在网络上传输数据，也适合处理分布式结构的信息数据。</term>
   <term name="zip">ZIP 是一种广泛使用的压缩文件格式，它可以将一个或多个文件或文件夹压缩至一个文件中，以便于存储、传输和共享。压缩后的文件通常以 .zip 为扩展名。</term>

   <!-- CPU 架构-->
   <term name="arm64">ARM64 是 ARM 架构的 64 位处理器。ARM 架构以其低功耗、高性能和灵活的设计而著称，广泛应用于移动设备、嵌入式系统以及越来越多的服务器领域。</term>
   <term name="x86">x86 是一种复杂指令集（CISC）计算机系统架构，最初由英特尔开发。它是个人电脑中最常见的处理器架构，支持 32 位和 64 位操作系统。</term>
   <term name="x86_64">x86_64（也称为 AMD64）是 x86 架构的 64 位版本，它向后兼容 32 位的 x86 架构，同时提供了更大的内存寻址空间和更好的性能。</term>

   <!-- 软件版本 -->
   <term name="beta">BETA 版本，通常被称为测试版或公开测试版，是软件在正式发布之前，提供给特定用户群进行测试的一个版本。</term>
   <term name="eap">EAP 是 Early Access Program 的缩写，翻译过来就是早期访问计划。简单来说，EAP 版本就是软件开发团队在正式发布新版本之前，提供给用户的一个测试版。这个版本包含了即将发布的新功能、改进和修复，但可能还存在一些未解决的问题或不稳定性。</term>
   <term name="rc">Release Candidate 是指在软件开发过程中，经过多次测试（例如：Alpha 测试、Beta 测试）后，认为基本稳定，功能完整，接近正式发布的版本。它被视为正式发布的"候选人"，如果在这个版本中没有发现严重的缺陷或问题，那么它很可能直接成为最终的正式版本（General Availability, GA）。</term>
</terms>
